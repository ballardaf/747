package edu.sc.cse.coursestats;

import static org.junit.Assert.*;

import org.junit.Test;

import junit.framework.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

public class HamcrestTest 
{

	@Test
	public void tesCourset() 
	{
		Course Csce515 = new Course("Csce", 515,"Nelly");
		Course Csce747 = new Course("CSCE", 747, "Matthews");
		//Course Networks = new Course("Csce", 515,"Nelly");
		//fail("Not yet implemented");
		assertThat(Csce515.toString(), equalTo(Csce747.toString()));
		
	}
	
	@Test
	public void testCourseMeeting() 
	{	
		//courses
		Course Csce515 = new Course("Csce", 515,"Nelly");
		Course Csce747 = new Course("CSCE", 747, "Matthews");
		
		//CourseMeetings
		CourseMeeting class1 = new CourseMeeting("212", "Monday","1:30 pm", Csce515 );
		CourseMeeting class2 = new CourseMeeting("121", "Monday", "1:30 pm", Csce747);
		
		assertThat(class1.toString(), equalTo(class2.toString()));
	}
	
	@Test
	public void testWeekTimeToStringFailed()
	{
		//courses
		Course Csce515 = new Course("Csce ", 515," Nelly");
		Course Csce747 = new Course("CSCE", 747, "Matthews");
		
		//times 
		WeekTime wt1 = new WeekTime("1:30 pm", "2:15 pm", Csce515);
		WeekTime wt2 = new WeekTime("1:30 pm ", "2:15 pm ", Csce747);

		assertThat(wt1.ToString(), equalTo(wt2.ToString()));
	}
	
	@Test
	public void testWeekTimeToStringPass()
	{
		//courses
		Course Csce515 = new Course("Csce ", 515," Nelly");
		Course Csce747 = new Course("CSCE", 747, "Matthews");
		
		//times 
		WeekTime wt1 = new WeekTime("1:30 pm", "2:15 pm", Csce515);
		WeekTime wt2 = new WeekTime("1:30 pm", "2:15 pm", Csce515);

		assertThat(wt1.ToString(), equalTo(wt2.ToString()));
	}
	
	@Test
	public void testWeekTimeCompareEqualToZero()
	{
		//courses
		Course Csce515 = new Course("Csce ", 515," Nelly");
		Course Csce747 = new Course("CSCE", 747, "Matthews");
		
		//times 
		WeekTime wt1 = new WeekTime("1:30 pm", "2:15 pm", Csce515);
		WeekTime wt2 = new WeekTime("1:30 pm", "2:15 pm", Csce515);

		assertThat(wt1.compare(wt2), equalTo(0));
	}
	
	@Test
	public void testWeekTimeCompareLessThanOne()
	{
		//courses
		Course Csce515 = new Course("Csce ", 515," Nelly");
		Course Csce747 = new Course("CSCE", 747, "Matthews");
		
		//times 
		WeekTime wt1 = new WeekTime("1:30 pm", "2:15 pm", Csce515);
		WeekTime wt2 = new WeekTime("2:30 pm", "3:15 pm", Csce515);

		assertThat(wt1.compare(wt2), equalTo(-1));
	}
	
	@Test
	public void testWeekTimeCompareMoreThanOne()
	{
		//courses
		Course Csce515 = new Course("Csce ", 515," Nelly");
		Course Csce747 = new Course("CSCE", 747, "Matthews");
		
		//times 
		WeekTime wt1 = new WeekTime("2:30 pm", "3:15 pm", Csce515);
		WeekTime wt2 = new WeekTime("2:30 pm", "2:15 pm", Csce747);


		assertThat(wt1.compare(wt2), equalTo(1));
	}
	
	@Test
	public void testCourseConstructorFail()
	{
		//course
		Course Csce515 = new Course("Csce ", 515," Nelly");
		assertThat(Csce515.getStart(), is(notNullValue()));
	}
	
	@Test
	public void testCourseConstructorPass()
	{
		//course
		Course Csce515 = new Course("Csce ", 515," Nelly", "2:15 pm", "3:15 pm");
		assertThat(Csce515.getStart(), is(notNullValue()));
	}
	
	@Test
	public void testCourseCompareEqaulToZero()
	{
		//course
		Course Csce515 = new Course("Csce ", 515," Nelly", "2:15 pm", "3:15 pm");
		Course Csce747 = new Course("CSCE", 747, "Matthews", "2:15 pm", "3:15 pm");
		assertThat(Csce515.CompareTo(Csce747), equalTo(0));
	}
	
	@Test
	public void testCourseComparelLessThanZero()
	{
		//course
		Course Csce515 = new Course("Csce ", 515," Nelly", "2:15 pm", "3:15 pm");
		Course Csce747 = new Course("CSCE", 747, "Matthews", "3:15 pm", "3:15 pm");
		assertThat(Csce515.CompareTo(Csce747), equalTo(-1));
	}
	
	@Test
	public void testCourseCompareMoreThanZero()
	{
		//course
		Course Csce515 = new Course("Csce ", 515," Nelly", "3:15 pm", "3:15 pm");
		Course Csce747 = new Course("CSCE", 747, "Matthews", "2:15 pm", "3:15 pm");
		assertThat(Csce515.CompareTo(Csce747), equalTo(1));
	}
	

}
